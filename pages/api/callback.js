import { Pool } from "pg";

const pool = new Pool({
  connectionString: process.env.DB_URL,
  ssl: { rejectUnauthorized: false },
});

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω" });
  }

  try {
    const { state, code } = req.body;

    console.log("üì• –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:", { state, code });

    if (!state || !code) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç state –∏–ª–∏ code.");
      return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç state –∏–ª–∏ code" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ state –≤ –ë–î
    console.log(`üîç –ü–æ–∏—Å–∫ chat_id –ø–æ state=${state} –≤ –ë–î...`);
    const querySelect = `SELECT chat_id FROM users WHERE state = $1`;
    const client = await pool.connect();
    const result = await client.query(querySelect, [state]);

    if (result.rows.length === 0) {
      console.warn(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è state=${state}`);
      client.release();
      return res.status(404).json({ error: "state –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î" });
    }

    const chat_id = result.rows[0].chat_id;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω chat_id=${chat_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ server.py...`);

    client.release();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º `state` –∏ `code` –Ω–∞ `server.py`
    const serverUrl = process.env.SERVER_URL + "/callback"; // –î–æ–±–∞–≤—å SERVER_URL –≤ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const response = await fetch(serverUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ state, code }),
    });

    const serverResponse = await response.json();
    console.log("üì® –û—Ç–≤–µ—Ç –æ—Ç server.py:", serverResponse);

    if (!response.ok || serverResponse.error || serverResponse.success === false) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç server.py:", serverResponse);
      return res.status(500).json({
        success: false,
        message:
          serverResponse.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –æ—Ç server.py",
      });
    }

    return res.status(200).json({
      success: true,
      message:
        serverResponse.message || "–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –∏ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã",
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
}